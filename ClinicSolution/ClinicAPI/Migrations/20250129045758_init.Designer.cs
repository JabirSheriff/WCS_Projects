// <auto-generated />
using System;
using ClinicAPI.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicAPI.Migrations
{
    [DbContext(typeof(ClinicContext))]
    [Migration("20250129045758_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicAPI.Models.Appointment", b =>
                {
                    b.Property<string>("AppointmentNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentNumber");

                    b.HasIndex("DoctorNumber");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicAPI.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Experience")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Phone")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorNumber");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ClinicAPI.Models.DoctorSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SpecilityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorNumber");

                    b.HasIndex("SpecilityId");

                    b.ToTable("DoctorSpecialities");
                });

            modelBuilder.Entity("ClinicAPI.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Age")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Phone")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicAPI.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiologist"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dermatologist"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Endocrinologist"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gastroenterologist"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hematologist"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Neurologist"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Oncologist"
                        });
                });

            modelBuilder.Entity("ClinicAPI.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClinicAPI.Models.Appointment", b =>
                {
                    b.HasOne("ClinicAPI.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Doctor");

                    b.HasOne("ClinicAPI.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Patient");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicAPI.Models.Doctor", b =>
                {
                    b.HasOne("ClinicAPI.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("ClinicAPI.Models.Doctor", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicAPI.Models.DoctorSpeciality", b =>
                {
                    b.HasOne("ClinicAPI.Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecialities")
                        .HasForeignKey("DoctorNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorSpeciality_Doctor");

                    b.HasOne("ClinicAPI.Models.Speciality", "Speciality")
                        .WithMany("Specialities")
                        .HasForeignKey("SpecilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorSpeciality_Specality");

                    b.Navigation("Doctor");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ClinicAPI.Models.Patient", b =>
                {
                    b.HasOne("ClinicAPI.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("ClinicAPI.Models.Patient", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Patient_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicAPI.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorSpecialities");
                });

            modelBuilder.Entity("ClinicAPI.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicAPI.Models.Speciality", b =>
                {
                    b.Navigation("Specialities");
                });

            modelBuilder.Entity("ClinicAPI.Models.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
